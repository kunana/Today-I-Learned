#include "stdafx.h"
#include "ColorShaderClass.h"


ColorShaderClass::ColorShaderClass()
{
}

ColorShaderClass::ColorShaderClass(const ColorShaderClass &)
{
}

ColorShaderClass::~ColorShaderClass()
{
}

bool ColorShaderClass::initialize(ID3D11Device* device, HWND hwnd)
{	
	// 정점 및 픽셀쉐이더를 초기화 합니다.
	return initializeShader(device, hwnd, L"../DX11/Color.vs", L"../DX11/Color.ps");
}

void ColorShaderClass::shutDown()
{	
	//버텍스 및 픽셀 쉐이더와 관련된 객체를 종료합니다
	shutdownShader();
}

bool ColorShaderClass::render(ID3D11DeviceContext * deviceContext, int indexCount, XMMATRIX worldMat, XMMATRIX viewMat, XMMATRIX projectionMat)
{
	//렌더링에 사용할 쉐이더 매개변수를 설정합니다.
	if(!setShaderParameters(deviceContext, worldMat, viewMat, projectionMat));
	{
		return false;
	}

	//설정된 버퍼를 쉐이더로 렌더링한다.
	renderShader(deviceContext, indexCount);
	return true;
}

bool ColorShaderClass::initializeShader(ID3D11Device * device, HWND hwnd, const WCHAR* vsFileName, const WCHAR* psFileName)
{
	ID3D10Blob* errorMessage = nullptr;

	//버텍스 쉐이더 코드를 컴파일후 버퍼에 할당합니다.
	ID3D10Blob* vertexShaderBuffer = nullptr;
	if (FAILED(D3DCompileFromFile(vsFileName, NULL, NULL, "ColorVertexShader", "vs_5_0", D3D10_SHADER_ENABLE_STRICTNESS,
		0, &vertexShaderBuffer, &errorMessage)))
	{	
		// 쉐이더 컴파일 실패시 오류메시지를 출력한다
		if (errorMessage)
		{
			outputShaderErrorMessage(errorMessage, hwnd, vsFileName);
		}
		// 컴파일 오류가 아니라면 쉐이더 파일을 찾을 수 없는 경우입니다
		else
		{
			MessageBox(hwnd, vsFileName, L"Missing Shader File", MB_OK);
		}
		return false;
	}
	
	//픽셀 쉐이더를 컴파일후 버퍼에 할당합니다.
	ID3D10Blob* pixelShaderBuffer = nullptr;
	if (FAILED(D3DCompileFromFile(psFileName, NULL, NULL, "ColorPixelShader", "ps_5_0", D3D10_SHADER_ENABLE_STRICTNESS,
		0, &pixelShaderBuffer, &errorMessage)))
	{
		if (errorMessage)
		{
			outputShaderErrorMessage(errorMessage, hwnd, psFileName);
		}
		else
		{
			MessageBox(hwnd, psFileName, L"Cannot Find Shader File", MB_OK);
		}
		return false;
	}

	//버퍼에서 버텍스 쉐이더를 생성합니다
	if (FAILED(device->CreateVertexShader(vertexShaderBuffer->GetBufferPointer(), vertexShaderBuffer->GetBufferSize(), NULL, &m_vertexShader)))
	{
		return false;
	}

	//버퍼에서 픽셀 쉐이더를 생성합니다
	if (FAILED(device->CreatePixelShader(pixelShaderBuffer->GetBufferPointer(), pixelShaderBuffer->GetBufferSize(), NULL, &m_pixelShader)))
	{
		return false;
	}

	//정점 입력 레이아웃 구조체를 설정합니다.
	//이 설정은 modelClass 와 쉐이더의 vertexType 구조와 일치해야합니다.
	D3D11_INPUT_ELEMENT_DESC polygonLayout[2];
	polygonLayout[0].SemanticName = "POSITION";
	polygonLayout[0].SemanticIndex = 0;
	polygonLayout[0].Format = DXGI_FORMAT_R32G32B32_FLOAT;
	polygonLayout[0].InputSlot = 0;
	polygonLayout[0].AlignedByteOffset = 0;
	polygonLayout[0].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
	polygonLayout[0].InstanceDataStepRate = 0;

	polygonLayout[1].SemanticName = "COLOR";
	polygonLayout[1].SemanticIndex = 0;
	polygonLayout[1].Format = DXGI_FORMAT_R32G32B32A32_FLOAT;
	polygonLayout[1].InputSlot = 0;
	polygonLayout[1].AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
	polygonLayout[1].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
	polygonLayout[1].InstanceDataStepRate = 0;

	//레이아웃 요소 수를 가져옵니다.
	unsigned int numElements = sizeof(polygonLayout) / sizeof(polygonLayout[0]);

	//정점 입력 레이아웃을 만듭니다.
	if (FAILED(device->CreateInputLayout(polygonLayout, numElements, vertexShaderBuffer->GetBufferPointer(), vertexShaderBuffer->GetBufferSize(), &m_inputLayout)))
	{
		return false;
	}

	//더 이상 사용되지 않는 정점, 픽셀 쉐이더 버퍼를 해제합니다.
	vertexShaderBuffer->Release();
	vertexShaderBuffer = 0;

	pixelShaderBuffer->Release();
	pixelShaderBuffer = 0;

	//정점 쉐이더에 잇는 행렬 상수 버퍼의 구조체를 작성합니다.
	D3D11_BUFFER_DESC matrixBufferDesc;
	matrixBufferDesc.Usage = D3D11_USAGE_DYNAMIC;
	matrixBufferDesc.ByteWidth = sizeof(matrixBufferType);
	matrixBufferDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
	matrixBufferDesc.MiscFlags = 0;
	matrixBufferDesc.StructureByteStride = 0;

	//상수 버퍼 포인터를 만들어 이클래스에서 정점 쉐이더 상수 버퍼에 접근할 수 있게 합니다.
	if (FAILED(device->CreateBuffer(&matrixBufferDesc, NULL, &m_matrixBuffer)))
	{
		return false;
	}
	return true;
}

void ColorShaderClass::shutdownShader()
{
	if (m_matrixBuffer)
	{
		m_matrixBuffer->Release();
		m_matrixBuffer = 0;
	}

	if (m_inputLayout)
	{
		m_inputLayout->Release();
		m_inputLayout = 0;
	}

	if (m_vertexShader)
	{
		m_vertexShader->Release();
		m_vertexShader = 0;
	}

	if (m_pixelShader)
	{
		m_pixelShader->Release();
		m_pixelShader = 0;
	}

}

void ColorShaderClass::outputShaderErrorMessage(ID3D10Blob * errorMessage, HWND hwnd, const WCHAR * shaderFileName)
{	
	//에러 메시지를 출력창에 표시합니다.
	OutputDebugStringA(reinterpret_cast<const char*>(errorMessage->GetBufferPointer()));

	//에러 메시지를 반환합니다.
	errorMessage->Release();
	errorMessage = 0;

	//컴파일 에러가 있음을 팝업 메세지로 알려줍니다.
	MessageBox(hwnd, L"Error compiling shader", shaderFileName, MB_OK);
}

bool ColorShaderClass::setShaderParameters(ID3D11DeviceContext * deviceContext, XMMATRIX worldMat, XMMATRIX viewMat, XMMATRIX projectionMat)
{	
	//행렬을 transpose 하여 쉐이더에서 사용할 수 있게 합니다.
	worldMat = XMMATRIX(worldMat);
	viewMat = XMMATRIX(viewMat);
	projectionMat = XMMATRIX(projectionMat);

	// 상수 버퍼의 내용을 쓸수 있도록 잠급니다.
	D3D11_MAPPED_SUBRESOURCE mappedResource;
	if (FAILED(deviceContext->Map(m_matrixBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mappedResource)))
	{
		return false;
	}
	
	//상수 버퍼의 데이터에 대한 포인터를 가져옵니다
	matrixBufferType* dataPtr = (matrixBufferType*)mappedResource.pData;

	//상수 버퍼에 행렬을 복사합니다.
	dataPtr->world = worldMat;
	dataPtr->view = viewMat;
	dataPtr->projection = projectionMat;

	//상수 버퍼의 잠금을 풉니다
	deviceContext->Unmap(m_matrixBuffer, 0);

	//정점 쉐이더에서의 상수 버퍼의 위치를 설정합니다.
	unsigned bufferNumber = 0;

	//마지막으로 정점쉐이더의 상수 버퍼를 바뀐 값으로 바꿉니다.
	deviceContext->VSSetConstantBuffers(bufferNumber, 1, &m_matrixBuffer);

	return true;
}

void ColorShaderClass::renderShader(ID3D11DeviceContext * deviceContext, int indexCount)
{
	//정점 입력 레이아웃을 설정합니다
	deviceContext->IASetInputLayout(m_inputLayout);

	//삼각형을 그릴 정점 쉐이더와 픽셀쉐이더를 설정합니다.
	deviceContext->VSSetShader(m_vertexShader, NULL, 0);
	deviceContext->PSSetShader(m_pixelShader, NULL, 0);

	//삼각형을 그립니다.
	deviceContext->DrawIndexed(indexCount, 0 ,0);
}
